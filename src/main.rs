use std::time::Instant;

use crate::{mind::mlp::MLP, engine::state::State};

mod engine;
mod mind;

fn main() {
    let mut state = State {nodes: vec![]};

    let xs1 = vec![(2.0f32, "x11"), (3.0f32, "x12"), (-1.0f32, "x13")];
    let xs2 = vec![(3.0f32, "x21"), (-1.0f32, "x22"), (0.5f32, "x23")];
    let xs3 = vec![(0.5f32, "x31"), (1.0f32, "x32"), (1.0f32, "x33")];
    let xs4 = vec![(1.0f32, "x41"), (1.0f32, "x42"), (-1.0f32, "x43")];

    let xs = vec![xs1, xs2, xs3, xs4];
    let ys = vec![1.0f32, -1.0f32, -1.0f32, 1.0f32];

    let mlp = MLP::new(3, vec![4, 4, 4, 1], &mut state);

    let prev_state: Vec<f32> = vec![0.36507, 0.007140656, -0.9938513, 1.0001291, 0.96163905, -0.9953644, 0.93050206, 0.12882917, 0.44457215, 0.36485204, 0.26034358, 0.30384892, 0.43129754, 0.053546973, -0.44660357, 0.48424542, -0.69629997, -0.18898918, 0.7962195, 0.98966026, -0.059524912, -0.9489582, -0.054129418, -0.71958095, 0.47714776, 0.4329282, -0.4179395, 0.07381243, -0.8625134, 0.52436787, -0.45421574, -0.7814619, 0.6924896, -0.19660842, 0.78610396, -0.047728796, -0.17657974, 0.75245476, 0.03279871, -0.42683858, -0.78316444, 0.62233853, 0.3813049, -0.18528824, -1.0573567, 0.6045687, -3.7231722, 1.1264905, -0.32409322, -0.26804888, 0.56723577, -0.69850576, 1.4830015, 0.13775465, -1.7000352, 0.43874863, -0.34699962, 1.0870386, 4.4225564, -2.8276858, -0.3718331];
    mlp.set_state(prev_state, &mut state);

    let start = Instant::now();
    mlp.train(&xs, &ys, 10000, 0.001, &mut state);
    let duration = start.elapsed();

    println!("duration: {:?}", duration);
    println!("state:\n{:?}", mlp.get_state(&state));
}

#[macro_export]
macro_rules! str {
    () => {
        String::new()
    };
    ($x:expr $(,)?) => {
        ToString::to_string(&$x)
    };
}
